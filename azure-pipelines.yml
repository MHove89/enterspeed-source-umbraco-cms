variables:
  majorVersion: $(MAJOR_VERSION)
  minorVersion: $(MINOR_VERSION)
  patchVersion: $(PATCH_VERSION)
  releaseOnNuget: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  version: $[format('{0}.{1}.{2}', variables.majorVersion, variables.minorVersion, variables.patchVersion)]
  # Versioning: 1.0.0
  semVersion: $[format('{0}', variables.version)]
  buildName: $(semVersion)

name: $(BuildID) - $(buildName)
trigger: none
stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          # Restore packages
          - task: DotNetCoreCLI@2
            displayName: Dotnet restore
            inputs:
              command: restore
              projects: "./Enterspeed.Source.UmbracoCms.sln"
              feedsToUse: config
              nugetConfigPath: "$(System.DefaultWorkingDirectory)/NuGet.Config"

          # Build solution
          - task: DotNetCoreCLI@2
            displayName: Dotnet build
            inputs:
              command: build
              projects: "Enterspeed.Source.UmbracoCms.sln"
              arguments: "--no-restore --configuration Release /p:Version=$(semVersion)"

          # Pack NuGet
          - task: DotNetCoreCLI@2
            displayName: Dotnet pack
            inputs:
              command: pack
              outputDir: "$(Build.ArtifactStagingDirectory)/NuGet"
              packagesToPack: "src/Enterspeed.Source.UmbracoCms.NetCore/Enterspeed.Source.UmbracoCms.NetCore.csproj"
              versioningScheme: byEnvVar
              versionEnvVar: semVersion

          # Publish artifacts
          - task: PublishPipelineArtifact@1
            displayName: Publish artifact - nupkg
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/NuGet"
              artifact: nupkg

  # - stage: Release
  #   displayName: Release
  #   condition: and(succeeded(), eq(variables.releaseOnNuget, 'true'))
  #   jobs:
  #     - deployment: ReleaseNuGet
  #       displayName: Release on NuGet.org
  #       environment: NuGetOrg
  #       pool:
  #         vmImage: ubuntu-latest
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: self
  #                 persistCredentials: true
  #                 clean: true
  #                 fetchDepth: 1

  #               # Tag release in git
  #               - task: Bash@3
  #                 displayName: Tag version in git
  #                 inputs:
  #                   targetType: inline
  #                   script: |
  #                     git tag $(semVersion)
  #                     git push --tags

  #               - task: NuGetCommand@2
  #                 displayName: Release on NuGet.org
  #                 inputs:
  #                   command: push
  #                   packagesToPush: "$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg"
  #                   nuGetFeedType: external
  #                   publishFeedCredentials: NuGet.org
